openapi: 3.0.3
info:
  title: Traineeship Management API
  version: 1.0.0
  description: API for managing students Traineeships
servers:
  - url: http://localhost:8080/api
    description: localhost
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: id, name, role
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages
    StudentRequest:
      type: object
      properties:
        birthday:
          type: string
          format: date
        phoneNumber:
          type: string
        course:
          type: string
        fullName:
          type: string
        groupId:
          type: integer
        specialityId:
          type: integer
    StudentResponse:
      type: object
      properties:
        id:
          type: integer
        birthday:
          type: string
          format: date
        phoneNumber:
          type: string
        course:
          type: string
        fullName:
          type: string
        group:
          $ref: '#/components/schemas/GroupResponse'
        speciality:
          $ref: '#/components/schemas/SpecialityResponse'
    TraineeshipRequest:
      type: object
      properties:
        studentId:
          type: integer
        organizationName:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    TraineeshipResponse:
      type: object
      properties:
        id:
          type: integer
        studentFullname:
          type: string
        organizationName:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          $ref : '#/components/schemas/TraineeshipStatusResponse'
    GroupRequest:
      type: object
      properties:
        name:
          type: string
    GroupResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    SpecialityRequest:
      type: object
      properties:
        name:
          type: string
    SpecialityResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    OrganizationRequest:
      type: object
      properties:
        name:
          type: string
    OrganizationResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    TraineeshipSupervisorRequest:
      type: object
      properties:
        fullName:
          type: string
        phoneNumber:
          type: string
        supervisorTypeId:
          type: integer
        organizationId:
          type: integer
    TraineeshipSupervisorResponse:
      type: object
      properties:
        id:
          type: integer
        fullName:
          type: string
        phoneNumber:
          type: string
        supervisorType:
          $ref: '#/components/schemas/TraineeshipSupervisorTypeResponse'
        organization:
          $ref: '#/components/schemas/OrganizationResponse'
    TraineeshipStatusResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    TraineeshipSupervisorTypeResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials

  /students:
    get:
      tags:
        - Student
      security:
        - bearerAuth: []
      summary: Get all students
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: speciality
          in: query
          required: false
          schema:
            type: string
          description: Filter students by Speciality
        - name: group
          in: query
          required: false
          schema:
            type: string
          description: Filter students by Group
      responses:
        200:
          description: List of students
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        401:
          description: Unauthorized - Missing or invalid JWT token
        403:
          description: Forbidden - Insufficient permissions
    post:
      tags:
        - Student
      security:
        - bearerAuth: []
      summary: Create new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentRequest'
      responses:
        201:
          description: Student created
        400:
          description: Invalid input

  /students/{id}:
    get:
      tags:
        - Student
      security:
        - bearerAuth: []
      summary: Get a student by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentResponse'
        404:
          description: Student not found
    patch:
      tags:
        - Student
      security:
        - bearerAuth: []
      summary: Update a student by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentRequest'
      responses:
        200:
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentResponse'
        404:
          description: Student not found
        400:
          description: Invalid input

  /traineeships:
    get:
      tags:
        - Traineeship
      security:
        - bearerAuth: []
      summary: Get all traineeships
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: Filter traineeship by Status
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter traineeships by start date
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Filter traineeships by end date
      responses:
        200:
          description: List of traineeships
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TraineeshipResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Traineeship
      security:
        - bearerAuth: []
      summary: Create new traineeship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraineeshipRequest'
      responses:
        201:
          description: Traineeship created
        400:
          description: Invalid input

  /traineeships/{id}:
    get:
      tags:
        - Traineeship
      security:
        - bearerAuth: []
      summary: Get a traineeship by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Traineeship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraineeshipResponse'
        404:
          description: Traineeship not found
    patch:
      tags:
        - Traineeship
      security:
        - bearerAuth: []
      summary: Update a traineeship by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraineeshipRequest'
      responses:
        200:
          description: Traineeship updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraineeshipResponse'
        404:
          description: Traineeship not found
        400:
          description: Invalid input

  /groups:
    get:
      tags:
        - Group
      security:
        - bearerAuth: []
      summary: Get all groups
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter groups by name (partial match)
      responses:
        200:
          description: List of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Group
      security:
        - bearerAuth: []
      summary: Create new group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        201:
          description: Group created
        400:
          description: Invalid input

  /groups/{id}:
    put:
      tags:
        - Group
      security:
        - bearerAuth: []
      summary: Update a group by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        200:
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        404:
          description: Group not found
        400:
          description: Invalid input

  /specialities:
    get:
      tags:
        - Speciality
      security:
        - bearerAuth: []
      summary: Get all specialities
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter specialities by name (partial match)
      responses:
        200:
          description: List of specialities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SpecialityResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Speciality
      security:
        - bearerAuth: []
      summary: Create new speciality
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialityRequest'
      responses:
        201:
          description: Speciality created
        400:
          description: Invalid input

  /specialities/{id}:
    put:
      tags:
        - Speciality
      security:
        - bearerAuth: []
      summary: Update a speciality by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecialityRequest'
      responses:
        200:
          description: Speciality updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialityResponse'
        404:
          description: Speciality not found
        400:
          description: Invalid input

  /organizations:
    get:
      tags:
        - Organization
      security:
        - bearerAuth: []
      summary: Get all organizations
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter organizations by name (partial match)
      responses:
        200:
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - Organization
      security:
        - bearerAuth: []
      summary: Create new organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        201:
          description: Organization created
        400:
          description: Invalid input

  /organizations/{id}:
    put:
      tags:
        - Organization
      security:
        - bearerAuth: []
      summary: Update an organization by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRequest'
      responses:
        200:
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        404:
          description: Organization not found
        400:
          description: Invalid input

  /traineeshipSupervisors:
    get:
      tags:
        - TraineeshipSupervisor
      security:
        - bearerAuth: []
      summary: Get all traineeship supervisors
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: fullName
          in: query
          required: false
          schema:
            type: string
          description: Filter supervisors by full name (partial match)
      responses:
        200:
          description: List of traineeship supervisors
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TraineeshipSupervisorResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    post:
      tags:
        - TraineeshipSupervisor
      security:
        - bearerAuth: []
      summary: Create new TraineeshipSupervisor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraineeshipSupervisorRequest'
      responses:
        201:
          description: TraineeshipSupervisor created
        400:
          description: Invalid input

  /traineeshipSupervisors/{id}:
    patch:
      tags:
        - TraineeshipSupervisor
      security:
        - bearerAuth: []
      summary: Update a traineeship supervisor by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TraineeshipSupervisorRequest'
      responses:
        200:
          description: Traineeship supervisor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TraineeshipSupervisorResponse'
        404:
          description: Traineeship supervisor not found
        400:
          description: Invalid input
security:
  - bearerAuth: []